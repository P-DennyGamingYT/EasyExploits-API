// Cracked By Payson Holmes

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.IO.Pipes;
using System.Net;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WindowsFormsApp18
{
  public class Form1 : Form
  {
    public int amount;
    private const int MOUSEEVENTF_LEFTDOWN = 2;
    private const int MOUSEEVENTF_LEFTUP = 4;
    private WebClient client = new WebClient();
    private IContainer components;
    private System.Windows.Forms.Timer timer1;
    private Label label1;

    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool WaitNamedPipe(string name, int timeout);

    private void SMTP(string pipe, string input)
    {
      if (NamedPipeExist(pipe))
      {
        try
        {
          using (NamedPipeClientStream pipeClientStream = new NamedPipeClientStream(".", pipe, PipeDirection.Out))
          {
            pipeClientStream.Connect();
            using (StreamWriter streamWriter = new StreamWriter((Stream) pipeClientStream))
            {
              streamWriter.Write(input);
              streamWriter.Dispose();
            }
            pipeClientStream.Dispose();
          }
        }
        catch (IOException ex)
        {
          int num = (int) MessageBox.Show("Error occured sending message to the game!", "Connection Failed!", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        }
        catch (Exception ex)
        {
          int num = (int) MessageBox.Show(ex.Message.ToString());
        }
      }
      else
      {
        int num1 = (int) MessageBox.Show("Error occured. Did the dll properly inject?", "Oops", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }

      static bool NamedPipeExist(string pipeName)
      {
        try
        {
          int timeout = 0;
          if (!Form1.WaitNamedPipe(Path.GetFullPath(string.Format("\\\\.\\pipe\\{0}", (object) pipeName)), timeout))
          {
            switch (Marshal.GetLastWin32Error())
            {
              case 0:
                return false;
              case 2:
                return false;
            }
          }
          return true;
        }
        catch (Exception ex)
        {
          return false;
        }
      }
    }

    private bool NamedPipeExist(string pipeName)
    {
      try
      {
        int timeout = 0;
        if (!Form1.WaitNamedPipe(Path.GetFullPath(string.Format("\\\\.\\pipe\\{0}", (object) pipeName)), timeout))
        {
          switch (Marshal.GetLastWin32Error())
          {
            case 0:
              return false;
            case 2:
              return false;
          }
        }
        return true;
      }
      catch (Exception ex)
      {
        return false;
      }
    }

    [DllImport("user32.dll", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)]
    public static extern void mouse_event(
      uint dwFlags,
      uint dx,
      uint dy,
      uint cButtons,
      uint dwExtraInfo);

    private void Click()
    {
      Rectangle bounds = Screen.PrimaryScreen.Bounds;
      int x = bounds.Width / 3;
      bounds = Screen.PrimaryScreen.Bounds;
      int y = bounds.Height / 4;
      Cursor.Position = new Point(x, y);
      Form1.mouse_event(6U, 0U, 0U, 0U, 0U);
    }

    private async void Mouse1Click()
    {
      await Task.Delay(800);
      this.Click();
      await Task.Delay(300);
      this.Click();
      await Task.Delay(300);
      this.Click();
      await Task.Delay(300);
      this.Click();
      await Task.Delay(300);
      this.Click();
      await Task.Delay(300);
      this.Click();
      await Task.Delay(300);
      this.Click();
    }

    private async void WaitInject()
    {
      if (this.NamedPipeExist("Furkus"))
      {
        Process.Start("https://easyexploits.com/redirectad"); // Ads that popup when you inject.
        Process.Start("https://easyexploits.com/redirectad2"); // Another Ad
        Process.Start("https://easyexploits.com/"); // Credits
        NamedPipes.LuaPipe(this.client.DownloadString("https://raw.githubusercontent.com/FilterDaniel/Update/master/inieasy.lua")); // This loads the animation you see on roblox when you inject.
        this.doShit();
      }
      else
      {
        ++this.amount;
        await Task.Delay(100);
        if (this.amount >= 100)
          return;
        this.WaitInject();
      }
    }

    [DllImport("user32.dll")]
    private static extern int SetWindowLong(IntPtr hWnd, int nIndex, uint dwNewLong);

    public Form1()
    {
      this.InitializeComponent();
      bool flag = false;
      foreach (Process process in Process.GetProcesses())
      {
        if (process.ProcessName == "RobloxPlayerBeta")
        {
          if (process.WorkingSet64.ToString().Length == 8)
            process.Kill();
          flag = true;
        }
      }
      if (!flag)
      {
        int num = (int) MessageBox.Show("Open Roblox before using EasyXploits!", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        Environment.Exit(0);
        Application.Exit();
      }
      this.timer1.Start();
      this.client.DownloadFile("https://cdn.discordapp.com/attachments/779633522658639893/1007050357144309820/FurkByteCode.dll", "FurkByteCode.dll");
      this.client.DownloadFile("https://cdn.discordapp.com/attachments/779633522658639893/1007050239561171096/FurkUltra.exe", "FurkUltraa.exe");
      this.client.DownloadFile("https://cdn.discordapp.com/attachments/779633522658639893/994432218577518703/Newtonsoft.Json.dll", "Newtonsoft.Json.dll");
      this.client.DownloadFile("https://cdn.discordapp.com/attachments/779633522658639893/994436010144452729/ICSharpCode.AvalonEdit.dll", "ICSharpCode.AvalonEdit.dll");
      this.client.DownloadFile("https://cdn.discordapp.com/attachments/779633522658639893/994436013013340181/System.Diagnostics.DiagnosticSource.dll", "System.Diagnostics.DiagnosticSource.dll");
      Directory.CreateDirectory("bin");
      Directory.CreateDirectory("Scripts");
      Functions.Inject();
      this.WaitInject();
    }

    private async void doShit()
    {
      NamedPipeServerStream namedPipeServerStream = new NamedPipeServerStream("ocybedam", PipeDirection.InOut);
      while (true)
      {
        await namedPipeServerStream.WaitForConnectionAsync();
        this.SMTP("Furkus", new StreamReader((Stream) namedPipeServerStream).ReadToEnd());
        namedPipeServerStream.Disconnect();
      }
    }

    private void timer1_Tick(object sender, EventArgs e)
    {
      Console.WriteLine(Process.GetProcessesByName("RobloxPlayerBeta").Length);
      if (Process.GetProcessesByName("RobloxPlayerBeta").Length != 0)
        return;
      Application.Exit();
      Environment.Exit(1);
      this.Close();
      Environment.Exit(0);
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Form1));
      this.timer1 = new System.Windows.Forms.Timer(this.components);
      this.label1 = new Label();
      this.SuspendLayout();
      this.timer1.Interval = 1;
      this.timer1.Tick += new EventHandler(this.timer1_Tick);
      this.label1.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.label1.AutoSize = true;
      this.label1.Font = new Font("Verdana", 24.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.label1.Location = new Point(29, 83);
      this.label1.Name = "label1";
      this.label1.Size = new Size(310, 80);
      this.label1.TabIndex = 0;
      this.label1.Text = "EasyXploits API\r\nis injecting...";
      this.label1.TextAlign = ContentAlignment.MiddleCenter;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(378, 267);
      this.Controls.Add((Control) this.label1);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.Manual;
      this.Text = "FurkWindow";
      this.WindowState = FormWindowState.Minimized;
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}
